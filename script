import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
pip install wordcloud
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
from sklearn import preprocessing
pip install kmodes
from kmodes.kprototypes import KPrototypes
import seaborn as sns
import random



#load the datasets
data1 = pd.read_excel(r'C:/Users/osann/OneDrive/Desktop/Data Science In Action Unified Survey (Risposte) (2).xlsx')
data2 = pd.read_excel(r'C:/Users/osann/OneDrive/Desktop/data science 2.xlsx')
data3 = pd.read_excel(r'C:/Users/osann/OneDrive/Desktop/data science completo.xlsx')


#check missing values 
data1.isnull() #inutile
data1.notnull() #inutile

#età media 
data1_mean = data1["How old are you?"].mean()

data2["What is you age?"] = data2["What is you age?"].astype("float")
#va rinominata 
data2_mean = data2["What is you age?"].mean()

#rename columns
data2.rename(columns = {"What is you age?":"age"}, inplace = True)
data1.rename(columns = {"How old are you?":"age"}, inplace = True)
data2.rename(columns = {"How would you describe your gender":"gender"}, inplace = True)
data1.rename(columns = {"How would you describe your gender?":"gender"}, inplace = True)
data3.rename(columns = {"How would you describe your gender":"gender"}, inplace = True)
data1.rename(columns = {"How would you describe yourself? (please, give three words separate by a comma)":"self"}, inplace = True)
data2.rename(columns = {"How would you describe yourself? (please, give three words separate by a comma)":"self"}, inplace = True)
data2.rename(columns = {"What would you say is your best quality?":"best_quality"}, inplace = True)
data1.rename(columns = {"What would you say is your best quality?":"best_quality"}, inplace = True)
data1.rename(columns = {"CHOOSE YOUR KEYWORD ;) format: aaaaaa00 - nothing that will remind of you. SCREENSHOT THIS ONCE TYPED :) (eg. pizzamargherita26)":"keyword"}, inplace = True)
data1.rename(columns = {"CHOOSE YOUR KEYWORD ;) format: aaaaaa00 - nothing that will remind of you. (eg. pizzamargherita26)":"keyword"}, inplace = True)
data1.rename(columns = {"Have you got insomnia problems?":"insomnia"}, inplace = True)
data2.rename(columns = {"Have you got insomnia problems?":"insomnia"}, inplace = True)
data1.rename(columns = {"How stressed do you feel on a scale from 1 (no stressed) to 5 (highly stressed)?":"stress_level"}, inplace = True)
data2.rename(columns = {"How stressed do you feel on a scale from 1 (no stressed) to 5 (highly stressed)?":"stress_level"}, inplace = True)

#rinominare data 3
data3.rename(columns = {"How would you describe your gender":"gender"}, inplace = True)
data3.rename(columns = {"Have you got insomnia problems?":"insomnia"}, inplace = True)
data3.rename(columns = {"Do you rather read a book or watch a movie?":"book_movie"}, inplace = True)
data3.rename(columns = {"What is your main source of daily news?":"daily_news"}, inplace = True)
data3.rename(columns = {"To contact someone, do you prefer a phone call or a text message?":"text_call"}, inplace = True)
data3.rename(columns = {"Do you consider yourself kind of bored?":"bored"}, inplace = True)
data3.rename(columns = {"In a social context do you find yourself using often the phone?":"phone_with_people"}, inplace = True)
data3.rename(columns = {"How many cigarettes do you smoke per day?":"cigarettes"}, inplace = True)
data3.rename(columns = {"What is the thing you value the most in your life (e.g. family, career, health, friendship etc.)?":"valuable_things"}, inplace = True)
data3.rename(columns = {"Do you feel happy?":"happiness"}, inplace = True)
data3.rename(columns = {"Do you monitor how many calories you acquire each day?":"calories"}, inplace = True)
data3.rename(columns = {"Do your parents smoke?":"smoking_parents"}, inplace = True)
data3.rename(columns = {"Are you anxious?":"anxiety"}, inplace = True)
data3.rename(columns = {"How many books do you read every year on average?":"books_year"}, inplace = True)
data3.rename(columns = {"How many times per week to you practice sport activity?":"sport_frequency"}, inplace = True)
data3.rename(columns = {"What is you age?":"age"}, inplace = True)
data3.rename(columns = {"Is one of your parents or both entrepreneur? ":"parents_ent"}, inplace = True)
data3.rename(columns = {"How many days do you think you can stay without a smartphone?":"days_without_phone"}, inplace = True)
data3.rename(columns = {"Have you ever looked at your phone to find out something (eg. Time) but got distracted and looked at something else forgetting the reason why you looked at your phone?":"phone_distraction"}, inplace = True)
data3.rename(columns = {"In your group of friends / people you hang out with, does the majority smoke?":"smoking_friends"}, inplace = True)
data3.rename(columns = {"Do you drink carbonated drinks?":"carbonated_drinks"}, inplace = True)
data3.rename(columns = {"How many hours on average do you spend using your phone in a day? (for a higher accuracy check the settings of your phone, please)":"phone_usage"}, inplace = True)
data3.rename(columns = {"How would you describe yourself? (please, give three words separate by a comma)":"self_description"}, inplace = True)
data3.rename(columns = {"Which sport do you practice?":"sport"}, inplace = True)
data3.rename(columns = {"From which university did you graduate? ":"uni"}, inplace = True)
data3.rename(columns = {"How do you think COVID-19 has affected your social life?":"covid_life"}, inplace = True)
data3.rename(columns = {"How stressed do you feel on a scale from 1 (no stressed) to 5 (highly stressed)?":"stress"}, inplace = True)
data3.rename(columns = {"How many languages do you speak fluently?":"languages"}, inplace = True)
data3.rename(columns = {"How many brothers or sisters do you have?":"bro_sis"}, inplace = True)
data3.rename(columns = {"How many books do you read every year on average?":"book_year"}, inplace = True)
data3.rename(columns = {"How many coffees are you having per day?":"coffee"}, inplace = True)
data3.rename(columns = {"What's your level of weekly alcohol assumption? ":"alcohol"}, inplace = True)
data3.rename(columns = {"How much do you care about nutrition and having a healthy lifestyle? ":"nutrition_care"}, inplace = True)
data3.rename(columns = {"At what time do you usually go to bed?":"bed_time"}, inplace = True)
data3.rename(columns = {"How many hours do you sleep per night on average?":"sleep_average"}, inplace = True)
data3.rename(columns = {"If you have one, what is (are) your favourite hobby(ies)?":"hobbies"}, inplace = True)
data3.rename(columns = {"What would you say is your best quality?":"best_quality"}, inplace = True)
data3.rename(columns = {"What do you do when you’re going through a personal crisis?":"personal_crisis"}, inplace = True)
data3.rename(columns = {"What's your parents’ degree level?":"parents_degree"}, inplace = True)
data3.rename(columns = {"How important is for you following a diet in your lifestyle? ":"diet"}, inplace = True)
data3.rename(columns = {"What is the field of your bachelor’s degree? ":"bachelor_degree"}, inplace = True)
data3.rename(columns = {"CHOOSE YOUR KEYWORD ;) format: aaaaaa00 - nothing that will remind of you. (eg. pizzamargherita26)":"keyword"}, inplace = True)
data3.rename(columns = {"Describe your typical evening in three words (please divide by a comma)":"evening"}, inplace = True)
data3.rename(columns = {"How many hours do you spend in hobbies per day?":"hobbies_time"}, inplace = True)



#replace missing value with actual values:
data3.isnull()
mean_phone = data3["phone_usage"].mean()
data3["phone_usage"] = data3["phone_usage"].replace(np.nan, mean_phone)

mean_sleep = data3["sleep_average"].mean()
data3["sleep_average"] = data3["sleep_average"].replace(np.nan, mean_sleep)

mean_hobbies = data3["hobbies_time"].mean()
data3["hobbies_time"] = data3["hobbies_time"].replace(np.nan, mean_hobbies)

data3["hobbies"] = data3["hobbies"].replace(np.nan, "none")
data3["covid_life"] = data3["covid_life"].replace(np.nan, "no answer")
data3["personal_crisis"] = data3["personal_crisis"].replace(np.nan, "no answer")
data3['sport_frequency'] = data3['sport_frequency'].replace(["I don't practice any sport"], [0])
data3['sport_frequency'] = data3['sport_frequency'].replace(["I don't practice any sports"], [0])
data3['sport_frequency'] = data3['sport_frequency'].replace(["More than 3 times per week"], [4])
data3['sport_frequency'] = data3['sport_frequency'].replace(["more than 3 times a week"], [4])
#levare colonna stress 1-7
data3.drop('Do you consider yourself a stressed person? Answer from 1 to 7 (1 minimum level, 7 maximum level)', axis = 1, inplace = True)

#age distribution
ax = sns.distplot(x=data3.age, bins=30) 
ax.set_xlabel('Age')
prices= data3.age.unique()


data4 = data3.copy()
data4.drop('self_description', axis=1, inplace=True)
data4.drop('covid_life', axis=1, inplace=True)
data4.drop('bed_time', axis=1, inplace=True)
data4.drop('hobbies', axis=1, inplace=True)
data4.drop('best_quality', axis=1, inplace=True)
data4.drop('personal_crisis', axis=1, inplace=True)
data4.drop('keyword', axis=1, inplace=True)
data4.drop('evening', axis=1, inplace=True)

data44 = data4.copy()
cost = []
for cluster in range(1, 10):
    try:
        kprototype = KPrototypes(n_jobs = -1, n_clusters = cluster, init = 'Huang', random_state = 0)
        kprototype.fit_predict(data44, categorical = [0,2,4,5,6,8,10,12,14,15,16,17,22,23,24,25,26,28,29,30,31,32,33])
        cost.append(kprototype.cost_)
        print('Cluster initiation: {}'.format(cluster))
    except:
        break
    
data44_cost = pd.DataFrame({'Cluster':range(1, 10), 'Cost':cost})
data44_cost.head()

pip install plotnine
from plotnine import *
import plotnine

plotnine.options.figure_size = (8, 4.8)
(
    ggplot(data = data44_cost)+
    geom_line(aes(x = 'Cluster',
                  y = 'Cost'))+
    geom_point(aes(x = 'Cluster',
                   y = 'Cost'))+
    geom_label(aes(x = 'Cluster',
                   y = 'Cost',
                   label = 'Cluster'),
               size = 10,
               nudge_y = 1000) +
    labs(title = 'Optimal number of cluster with Elbow Method')+
    xlab('Number of Clusters k')+
    ylab('Cost')+
    theme_minimal()
)



kprototype = KPrototypes(n_jobs = -1, n_clusters = 3, init = 'Huang', random_state = 0)
kprototype.fit_predict(data44, categorical = [0,2,4,5,6,8,10,12,14,15,16,17,22,23,24,25,26,28,29,30,31,32,33] )

# Cluster centorid
kprototype.cluster_centroids_
# Check the iteration of the clusters created
kprototype.n_iter_
# Check the cost of the clusters created
kprototype.cost_

#remove normalization 
#data4_norm[['age', 'sport_frequency','languages', 'bro_sis', 'coffee', 'phone_usage', 'sleep_average', 'hobbies_time', 'stress', 'alcohol', 'nutrition_care', 'diet']] = scaler.inverse_transform(data4_norm[['age','sport_frequency', 'languages', 'bro_sis', 'coffee', 'phone_usage', 'sleep_average', 'hobbies_time', 'stress', 'alcohol', 'nutrition_care', 'diet']])

# Add the cluster to the dataframe
data44['Cluster Labels'] = kprototype.labels_
data44['Segment'] = data44['Cluster Labels'].map({0:'First', 1:'Second', 2:'Third'})
# Order the cluster
data44['Segment'] = data44['Segment'].astype('category')
data44['Segment'] = data44['Segment'].cat.reorder_categories(['First','Second','Third'])



data44.rename(columns = {'Cluster Labels':'Total'}, inplace = True)
data5 = data44.groupby('Segment').agg(
    {
        'Total':'count',
        'gender': lambda x: x.value_counts().index[0],
        'insomnia': lambda x: x.value_counts().index[0],
        'sport': lambda x: x.value_counts().index[0],
        'uni': lambda x: x.value_counts().index[0],
        'days_without_phone':lambda x: x.value_counts().index[0],
        'phone_distraction':lambda x: x.value_counts().index[0],
        'book_movie':lambda x: x.value_counts().index[0],
        'books_year':lambda x: x.value_counts().index[0],
        'daily_news':lambda x: x.value_counts().index[0],
        'text_call':lambda x: x.value_counts().index[0],
        'bored':lambda x: x.value_counts().index[0],
        'phone_with_people':lambda x: x.value_counts().index[0],
        'cigarettes':lambda x: x.value_counts().index[0],
        'valuable_things':lambda x: x.value_counts().index[0],
        'happiness':lambda x: x.value_counts().index[0],
        'parents_ent':lambda x: x.value_counts().index[0],
        'parents_degree':lambda x: x.value_counts().index[0],
        'carbonated_drinks':lambda x: x.value_counts().index[0],
        'calories':lambda x: x.value_counts().index[0],
        'bachelor_degree':lambda x: x.value_counts().index[0],
        'smoking_parents':lambda x: x.value_counts().index[0],
        'smoking_friends':lambda x: x.value_counts().index[0],
        'anxiety':lambda x: x.value_counts().index[0],
        'age': 'mean',
        'sport_frequency': 'mean',
        'languages': 'mean',
        'bro_sis': 'mean',
        'coffee': 'mean',
        'phone_usage':'mean',
        'sleep_average':'mean',
        'hobbies_time':'mean',
        'stress':'mean',
        'alcohol':'mean',
        'nutrition_care':'mean',
        'diet':'mean'
        
    }
).reset_index()

cc0 = data44[data44['Segment']== 'First']
cc1 = data44[data44['Segment']== 'Second']
cc2 = data44[data44['Segment']== 'Third']

